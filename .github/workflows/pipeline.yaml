#trustep/aws-sam-custom-deploy:1.0.0-$(date "+%Y%m%d-%H%M%S")
name: Pipeline

on:
  push:
    branches:
      - 'feature**'
  delete:
    branches:
      - 'feature**'

env:
  SAM_CLI_TELEMETRY: 0

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      FEATURE_STACK_NAME: ${{ steps.setupVars.outputs.FEATURE_STACK_NAME }}
      NEXT_RELEASE_BASE_VERSION: ${{ steps.setupVars.outputs.NEXT_RELEASE_BASE_VERSION }}
      SAM_CONFIG_FILE: ${{ steps.setupVars.outputs.SAM_CONFIG_FILE }}
      SAM_TEMPLATE: ${{ steps.setupVars.outputs.SAM_TEMPLATE }}
      OUTPUT_TEMPLATE_FILE: ${{ steps.setupVars.outputs.OUTPUT_TEMPLATE_FILE }}
      ARTIFACTS_BUCKET: ${{ steps.setupVars.outputs.ARTIFACTS_BUCKET }}
      CF_STACK_NAME: ${{ steps.setupVars.outputs.CF_STACK_NAME }}
      BITBUCKET_DEPLOYMENT_ENVIRONMENT: ${{ steps.setupVars.outputs.BITBUCKET_DEPLOYMENT_ENVIRONMENT }}
      IMAGE: ${{ steps.setupVars.outputs.IMAGE }}
      BITBUCKET_REPO_SLUG: ${{ steps.setupVars.outputs.BITBUCKET_REPO_SLUG }}
      ARTIFACTS_BUCKET_PREFIX: ${{ steps.setupVars.outputs.ARTIFACTS_BUCKET_PREFIX }}
      BITBUCKET_CLONE_DIR: ${{ steps.setupVars.outputs.BITBUCKET_CLONE_DIR }}
      LOCAL_PATH: ${{ steps.setupVars.outputs.LOCAL_PATH }}
    steps:
      - id: setupVars
        name: Setup Environment Variables
        env:
          NEXT_RELEASE_BASE_VERSION: 1.0.0
          FEATURE_BRANCH_NAME: ${{github.event.ref}}
          SAM_CONFIG_FILE: samconfig.toml
          SAM_TEMPLATE: template.yaml
          OUTPUT_TEMPLATE_FILE: packaged-template.yaml
          ARTIFACTS_BUCKET: io.trustep.manager.cf.templates
          CAPABILITIES: CAPABILITY_IAM
          CF_STACK_NAME: aws-sam-custom-deploy
          BITBUCKET_DEPLOYMENT_ENVIRONMENT: qa
          BITBUCKET_REPO_SLUG: aws-sam-custom-deploy
          BITBUCKET_CLONE_DIR: /project
        run: |
          FEATURE_STACK_NAME=$(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]')
          IMAGE="${BITBUCKET_REPO_SLUG}:${NEXT_RELEASE_BASE_VERSION}-feat-${FEATURE_STACK_NAME}"
          ARTIFACTS_BUCKET_PREFIX="${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/${BITBUCKET_REPO_SLUG}/${CF_STACK_NAME}"
          LOCAL_PATH=$(pwd)/src/test/docker/resources

          echo "FEATURE_STACK_NAME=${FEATURE_STACK_NAME}" >> $GITHUB_OUTPUT
          echo "NEXT_RELEASE_BASE_VERSION=${NEXT_RELEASE_BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "SAM_CONFIG_FILE=${SAM_CONFIG_FILE}" >> $GITHUB_OUTPUT
          echo "SAM_TEMPLATE=${SAM_TEMPLATE}" >> $GITHUB_OUTPUT
          echo "OUTPUT_TEMPLATE_FILE=${OUTPUT_TEMPLATE_FILE}" >> $GITHUB_OUTPUT
          echo "ARTIFACTS_BUCKET=${ARTIFACTS_BUCKET}" >> $GITHUB_OUTPUT
          echo "CF_STACK_NAME=${CF_STACK_NAME}" >> $GITHUB_OUTPUT
          echo "BITBUCKET_DEPLOYMENT_ENVIRONMENT=${BITBUCKET_DEPLOYMENT_ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "IMAGE=${IMAGE}" >> $GITHUB_OUTPUT
          echo "BITBUCKET_REPO_SLUG=${BITBUCKET_REPO_SLUG}" >> $GITHUB_OUTPUT
          echo "ARTIFACTS_BUCKET_PREFIX=${ARTIFACTS_BUCKET_PREFIX}" >> $GITHUB_OUTPUT
          echo "BITBUCKET_CLONE_DIR=${BITBUCKET_CLONE_DIR}" >> $GITHUB_OUTPUT
          echo "LOCAL_PATH=${LOCAL_PATH}" >> $GITHUB_OUTPUT
  
  deploy-feature:
    if: startsWith(github.ref, 'refs/heads/feature') && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build the Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CF_EXECUTION_ROLE: ${{ secrets.CLOUDFORMATION_EXECUTION_ROLE }}
          PIPELINE_EXECUTION_ROLE: ${{ secrets.PIPELINE_EXECUTION_ROLE }}
          PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FEATURE_STACK_NAME: ${{ needs.prepare.outputs.FEATURE_STACK_NAME }}
          NEXT_RELEASE_BASE_VERSION: ${{ needs.prepare.outputs.NEXT_RELEASE_BASE_VERSION }}
          SAM_CONFIG_FILE: ${{ needs.prepare.outputs.SAM_CONFIG_FILE }}
          SAM_TEMPLATE: ${{ needs.prepare.outputs.SAM_TEMPLATE }}
          OUTPUT_TEMPLATE_FILE: ${{ needs.prepare.outputs.OUTPUT_TEMPLATE_FILE }}
          ARTIFACTS_BUCKET: ${{ needs.prepare.outputs.ARTIFACTS_BUCKET }}
          CF_STACK_NAME: ${{ needs.prepare.outputs.CF_STACK_NAME }}
          BITBUCKET_DEPLOYMENT_ENVIRONMENT: ${{ needs.prepare.outputs.BITBUCKET_DEPLOYMENT_ENVIRONMENT }}
          BITBUCKET_REPO_SLUG: ${{ needs.prepare.outputs.BITBUCKET_REPO_SLUG }}
          ARTIFACTS_BUCKET_PREFIX: ${{ needs.prepare.outputs.ARTIFACTS_BUCKET_PREFIX }}
          BITBUCKET_CLONE_DIR: ${{ needs.prepare.outputs.BITBUCKET_CLONE_DIR }}
          LOCAL_PATH: ${{ needs.prepare.outputs.LOCAL_PATH }}

        run: |
          cd src/main/docker
          docker build . --file Dockerfile --tag ${{needs.prepare.outputs.IMAGE}}
          cd ../../..
          echo "Deploying Test Stack"
          docker run --rm \
            -e SAM_TEMPLATE="${SAM_TEMPLATE}" \
            -e OUTPUT_TEMPLATE_FILE="${OUTPUT_TEMPLATE_FILE}" \
            -e PIPELINE_USER_ACCESS_KEY_ID="${PIPELINE_USER_ACCESS_KEY_ID}" \
            -e PIPELINE_USER_SECRET_ACCESS_KEY="${PIPELINE_USER_SECRET_ACCESS_KEY}" \
            -e PIPELINE_EXECUTION_ROLE="${PIPELINE_EXECUTION_ROLE}" \
            -e CF_STACK_NAME="${CF_STACK_NAME}" \
            -e BITBUCKET_REPO_SLUG="${BITBUCKET_REPO_SLUG}" \
            -e BITBUCKET_DEPLOYMENT_ENVIRONMENT="${BITBUCKET_DEPLOYMENT_ENVIRONMENT}" \
            -e ARTIFACTS_BUCKET="${ARTIFACTS_BUCKET}" \
            -e ARTIFACTS_BUCKET_PREFIX="${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/${BITBUCKET_REPO_SLUG}/${CF_STACK_NAME}" \
            -e AWS_REGION="${AWS_REGION}" \
            -e CF_EXECUTION_ROLE="${CF_EXECUTION_ROLE}" \
            -e SAM_CONFIG_FILE="${SAM_CONFIG_FILE}" \
            -e BITBUCKET_CLONE_DIR="${BITBUCKET_CLONE_DIR}" \
            -e CAPABILITIES="${CAPABILITIES}" \
            -v ${LOCAL_PATH}:${BITBUCKET_CLONE_DIR} \
            "${IMAGE}"
          LAMBDA_NAME=`aws cloudformation describe-stack-resources --stack-name aws-sam-custom-deploy --logical-resource-id HelloWorld --output text --query "StackResources[0].PhysicalResourceId"`
          aws lambda invoke --function-name aws-sam-custom-deploy-HelloWorld-wVY7faXAiis5 --log-type None msg.json
          LAMBDA_MSG=$(cat msg.json | jq -r .msg)
          EXPECTED_MSG="Hello World from AWS SAM samconfig.toml"
          if [[ ${LAMBDA_MSG} == ${EXPECTED_MSG} ]]
          then
            echo "Message returned by Hello World lambda returned as expected: ${LAMBDA_MSG}"
          else
            echo "Message returned by Hello World lambda is not equals as expected."
            echo "Expected: ${EXPECTED_MSG}"
            echo "Returned: ${LAMBDA_MSG}"
            exit 1
          fi
          echo "Assuming Pipeline Role"
          cred=$(aws sts assume-role \
            --role-arn "$PIPELINE_EXECUTION_ROLE" \
            --role-session-name "testing-stage-packaging" \
            --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
            --output text \
          )
          AWS_ACCESS_KEY_ID=$(echo "$cred" | awk '{ print $1 }')
          AWS_SECRET_ACCESS_KEY=$(echo "$cred" | awk '{ print $2 }')
          AWS_SESSION_TOKEN=$(echo "$cred" | awk '{ print $3 }')
          echo "Deleting test stack"
          sam delete \
            --no-prompts \
            --stack-name "${CF_STACK_NAME}" \
            --config-file "${SAM_CONFIG_FILE}" \
            --config-env "${BITBUCKET_DEPLOYMENT_ENVIRONMENT}" \
            --region "${AWS_REGION}" \
            --s3-bucket "${ARTIFACTS_BUCKET}" \
            --s3-prefix "${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/${BITBUCKET_REPO_SLUG}/${CF_STACK_NAME}"

  undeploy-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    uses: trustep/io.trustep.github.workflows/.github/workflows/sam-undeploy-pipeline.yaml@main
    with:
      stack_name: ${{needs.setup-vars.outputs.FEATURE_STACK_NAME}}
      pipeline_execution_role_arn: ${{needs.setup-vars.outputs.TESTING_PIPELINE_EXECUTION_ROLE}}
      artifacts_s3_bucket_name: ${{needs.setup-vars.outputs.TESTING_ARTIFACTS_BUCKET}}
      region: ${{needs.setup-vars.outputs.TESTING_REGION}}
      sam_config_filename: ${{needs.setup-vars.outputs.SAM_CONFIG_FILENAME}}
      sam_config_environment_name: QA
    secrets: inherit